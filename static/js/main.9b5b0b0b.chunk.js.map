{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","_ref","kitty","map","user","i","src_components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","setState","Component","App","_this2","fetch","then","response","json","users","_this$state","searchField","filteredKitties","filter","toLowerCase","includes","length","components_SearchBox","onSearchChange","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchKitties","dispatch","event","payload","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","initialState","store","createStore","arguments","undefined","action","assign","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9b5b0b0b.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css';\n\n\nconst Card = (name, email, id) => {\n  // const { name, id, email } = props;\n  return <div className=\"bg-light-green tc dib br3 pa3 ma2 grow bw2 shadow-5\">\n    <img className=\"card\" src={`https://robohash.org/${id}?set=set4`} alt=\"kitty\" />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>;\n}\n\nexport default Card;","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ kitty }) => {\n  return (\n    <div>\n      {kitty.map((user, i) => {\n        return (\n          <Card\n            key={i}\n            id={kitty[i].id}\n            name={kitty[i].name}\n            email={kitty[i].email}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ( {searchfield, searchChange}) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search kitties'\n        onChange={searchChange}\n      /> \n    </div>\n  )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{overflowY: 'scroll', border: '5px solid black', height: '500px'}}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      hasError: false \n    };\n    \n  }\n\n  componentDidCatch() {\n    this.setState({hasError: true})\n  }\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oops, that is not good</h1>\n    }\n    return this.props.children\n  }\n\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport  { connect } from 'react-redux';\nimport { setSearchField } from \"../actions\";\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\nconst mapStateToProps = (state) => {\n  return { searchField: state.searchKitties };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value))\n  };\n};\n\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      kitty: []\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ kitty: users }));\n  }\n  \n  render () {\n    const { kitty, searchField } = this.state;\n    const filteredKitties = kitty.filter(kitty => {\n      return kitty.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    \n    return !kitty.length ? <h1 className=\"tc\">\n        Loading\n      </h1> : <div className=\"tc\">\n        <h1 className=\"f1\">Kitty Friends</h1>\n        <SearchBox searchChange={this.onSearchChange} />\n        <Scroll>\n          <ErrorBoundry>\n            <CardList kitty={filteredKitties} />\n          </ErrorBoundry>\n        </Scroll>\n      </div>;\n    }\n  }\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD } from './constants.js';\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text \n});","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_SEARCH_FIELD} from './constants.js';\n\nconst initialState = {\n  searchField: ''\n}\n\nexport const searchKitties = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload })\n    default:\n      return state\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { searchKitties } from './reducers';\nimport 'tachyons';\n\n\nconst store = createStore(searchKitties)\n\nReactDOM.render(\n  <div>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </div>,\n  document.getElementById(\"root\")\n);\nregisterServiceWorker();\n"],"sourceRoot":""}